// Generated by gencpp from file aras_cam_daq/cdr_data.msg
// DO NOT EDIT!


#ifndef ARAS_CAM_DAQ_MESSAGE_CDR_DATA_H
#define ARAS_CAM_DAQ_MESSAGE_CDR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace aras_cam_daq
{
template <class ContainerAllocator>
struct cdr_data_
{
  typedef cdr_data_<ContainerAllocator> Type;

  cdr_data_()
    : header()
    , knob(0)
    , encoders()
    , forces()
    , TS()  {
    }
  cdr_data_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , knob(0)
    , encoders(_alloc)
    , forces(_alloc)
    , TS(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _knob_type;
  _knob_type knob;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _encoders_type;
  _encoders_type encoders;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _forces_type;
  _forces_type forces;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _TS_type;
  _TS_type TS;





  typedef boost::shared_ptr< ::aras_cam_daq::cdr_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aras_cam_daq::cdr_data_<ContainerAllocator> const> ConstPtr;

}; // struct cdr_data_

typedef ::aras_cam_daq::cdr_data_<std::allocator<void> > cdr_data;

typedef boost::shared_ptr< ::aras_cam_daq::cdr_data > cdr_dataPtr;
typedef boost::shared_ptr< ::aras_cam_daq::cdr_data const> cdr_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aras_cam_daq::cdr_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aras_cam_daq::cdr_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aras_cam_daq::cdr_data_<ContainerAllocator1> & lhs, const ::aras_cam_daq::cdr_data_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.knob == rhs.knob &&
    lhs.encoders == rhs.encoders &&
    lhs.forces == rhs.forces &&
    lhs.TS == rhs.TS;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aras_cam_daq::cdr_data_<ContainerAllocator1> & lhs, const ::aras_cam_daq::cdr_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aras_cam_daq

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aras_cam_daq::cdr_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aras_cam_daq::cdr_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aras_cam_daq::cdr_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aras_cam_daq::cdr_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aras_cam_daq::cdr_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aras_cam_daq::cdr_data_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aras_cam_daq::cdr_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a6aeaab60b5a774977b1106284e3002";
  }

  static const char* value(const ::aras_cam_daq::cdr_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a6aeaab60b5a774ULL;
  static const uint64_t static_value2 = 0x977b1106284e3002ULL;
};

template<class ContainerAllocator>
struct DataType< ::aras_cam_daq::cdr_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aras_cam_daq/cdr_data";
  }

  static const char* value(const ::aras_cam_daq::cdr_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aras_cam_daq::cdr_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32                    knob\n"
"int32[]                  encoders\n"
"int32[]                  forces\n"
"uint64[]                 TS\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::aras_cam_daq::cdr_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aras_cam_daq::cdr_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.knob);
      stream.next(m.encoders);
      stream.next(m.forces);
      stream.next(m.TS);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cdr_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aras_cam_daq::cdr_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aras_cam_daq::cdr_data_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "knob: ";
    Printer<int32_t>::stream(s, indent + "  ", v.knob);
    s << indent << "encoders[]" << std::endl;
    for (size_t i = 0; i < v.encoders.size(); ++i)
    {
      s << indent << "  encoders[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.encoders[i]);
    }
    s << indent << "forces[]" << std::endl;
    for (size_t i = 0; i < v.forces.size(); ++i)
    {
      s << indent << "  forces[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.forces[i]);
    }
    s << indent << "TS[]" << std::endl;
    for (size_t i = 0; i < v.TS.size(); ++i)
    {
      s << indent << "  TS[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.TS[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARAS_CAM_DAQ_MESSAGE_CDR_DATA_H
